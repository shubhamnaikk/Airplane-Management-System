/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Finals;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class Frame3Reservation extends javax.swing.JFrame {

   String SeatNo,Price,FlightClass,Origin3,Destination3,Date2,Time2;
   int LP,x,Random;        
    public Frame3Reservation() {
        initComponents();
    }
    
    public void SeatReservation(String Date,String Departure,String Airliner,String Terminal,String FlightPrice2,String Origin2,String Destination2){
        airlinerField.setText(Airliner);
        DateField.setText(Date);
        TimeField.setText(Departure);
        TerminalField.setText(Terminal);
        LP =Integer.parseInt(FlightPrice2);
        Origin3 = Origin2;
        Destination3 = Destination2;
        Date2 = Date;
        Time2 = Departure;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FirstTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        EconomyTable = new javax.swing.JTable();
        airlinerField = new javax.swing.JTextField();
        DateField = new javax.swing.JTextField();
        TerminalField = new javax.swing.JTextField();
        TimeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ViewButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FirstTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seat No.", "Price in Php"
            }
        ));
        FirstTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FirstTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(FirstTable);

        EconomyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seat No.", "Price in Php"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EconomyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EconomyTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(EconomyTable);

        airlinerField.setEditable(false);

        DateField.setEditable(false);

        TerminalField.setEditable(false);

        TimeField.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel2.setText("Economy Class");

        ViewButton.setText("View Available Seats");
        ViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel3.setText("Airliner:");

        jLabel4.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel4.setText("Flight Leaves:");

        jLabel5.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel5.setText("First Class");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(ViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(152, 152, 152)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(49, 49, 49)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(DateField, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TerminalField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(airlinerField))))
                        .addGap(75, 75, 75))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(airlinerField)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(DateField, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                        .addComponent(TimeField)
                        .addComponent(TerminalField))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 620, 440));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newpackage/10642513-Global-Rays-Global-Corporate-Background-Blue-Twisted-Rays-and-Silver-World-Globe-Model-Horizontal-De-Stock-Photo.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 541));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void EconomyTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EconomyTableMouseClicked
        Frame4Reservation kentjohn = new Frame4Reservation();
        int num = EconomyTable.getSelectedRow();
        DefaultTableModel kent = (DefaultTableModel) EconomyTable.getModel();
        switch(x){
            case 1:
                
        SeatNo = kent.getValueAt(num,0).toString();
        Price = kent.getValueAt(num,1).toString();
        FlightClass = "Economy Class";
        kentjohn.seatReserve(SeatNo, Price,FlightClass,Origin3,Destination3,Date2,Time2,Random);
        kentjohn.setVisible(true);
        if(EconomyTable.getSelectedRow()==-1){
           
        }
        else{
            kent.removeRow(EconomyTable.getSelectedRow()); 
        }
             try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP1000.txt"));
                    bw.write("");
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP1000.txt"));
                    for(int i=0;i<EconomyTable.getRowCount(); i++){
                        for(int j=0;j<EconomyTable.getColumnCount(); j++){
                            bw.write((String)EconomyTable.getModel().getValueAt(i,j)+"\t");
                        }
                        bw.newLine();
                        
                    }
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                
              this.dispose();
                
             break;
            case 2:
                 
        SeatNo = kent.getValueAt(num,0).toString();
        Price = kent.getValueAt(num,1).toString();
        FlightClass = "Economy Class";
        kentjohn.seatReserve(SeatNo, Price,FlightClass,Origin3,Destination3,Date2,Time2,Random);
        kentjohn.setVisible(true);
        if(EconomyTable.getSelectedRow()==-1){
           
        }
        else{
            kent.removeRow(EconomyTable.getSelectedRow()); 
        }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP1500.txt"));
                    bw.write("");
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP1500.txt"));
                    for(int i=0;i<EconomyTable.getRowCount(); i++){
                        for(int j=0;j<EconomyTable.getColumnCount(); j++){
                            bw.write((String)EconomyTable.getModel().getValueAt(i,j)+"\t");
                        }
                        bw.newLine();
                        
                    }
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                
              this.dispose();
              break;
            case 3:
                SeatNo = kent.getValueAt(num,0).toString();
        Price = kent.getValueAt(num,1).toString();
        FlightClass = "Economy Class";
        kentjohn.seatReserve(SeatNo, Price,FlightClass,Origin3,Destination3,Date2,Time2,Random);
        kentjohn.setVisible(true);
        if(EconomyTable.getSelectedRow()==-1){
           
        }
        else{
            kent.removeRow(EconomyTable.getSelectedRow()); 
        }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP2000.txt"));
                    bw.write("");
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP2000.txt"));
                    for(int i=0;i<EconomyTable.getRowCount(); i++){
                        for(int j=0;j<EconomyTable.getColumnCount(); j++){
                            bw.write((String)EconomyTable.getModel().getValueAt(i,j)+"\t");
                        }
                        bw.newLine();
                        
                    }
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                
              this.dispose();
              break;
            case 4:
                SeatNo = kent.getValueAt(num,0).toString();
        Price = kent.getValueAt(num,1).toString();
        FlightClass = "Economy Class";
        kentjohn.seatReserve(SeatNo, Price,FlightClass,Origin3,Destination3,Date2,Time2,Random);
        kentjohn.setVisible(true);
        if(EconomyTable.getSelectedRow()==-1){
           
        }
        else{
            kent.removeRow(EconomyTable.getSelectedRow()); 
        }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP2500.txt"));
                    bw.write("");
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP2500.txt"));
                    for(int i=0;i<EconomyTable.getRowCount(); i++){
                        for(int j=0;j<EconomyTable.getColumnCount(); j++){
                            bw.write((String)EconomyTable.getModel().getValueAt(i,j)+"\t");
                        }
                        bw.newLine();
                        
                    }
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                
              this.dispose();
              break;
            case 5:
                SeatNo = kent.getValueAt(num,0).toString();
        Price = kent.getValueAt(num,1).toString();
        FlightClass = "Economy Class";
        kentjohn.seatReserve(SeatNo, Price,FlightClass,Origin3,Destination3,Date2,Time2,Random);
        kentjohn.setVisible(true);
        if(EconomyTable.getSelectedRow()==-1){
           
        }
        else{
            kent.removeRow(EconomyTable.getSelectedRow()); 
        }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP3000.txt"));
                    bw.write("");
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatEcoP3000.txt"));
                    for(int i=0;i<EconomyTable.getRowCount(); i++){
                        for(int j=0;j<EconomyTable.getColumnCount(); j++){
                            bw.write((String)EconomyTable.getModel().getValueAt(i,j)+"\t");
                        }
                        bw.newLine();
                        
                    }
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                
              this.dispose();
              break;
        }    
            
    }//GEN-LAST:event_EconomyTableMouseClicked

    private void FirstTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FirstTableMouseClicked
        Random=342325345;
        Frame4Reservation kentjohn = new Frame4Reservation();
        int num = FirstTable.getSelectedRow();
        DefaultTableModel kent = (DefaultTableModel) FirstTable.getModel();
        SeatNo = kent.getValueAt(num,0).toString();
        Price = kent.getValueAt(num,1).toString();
        FlightClass = "First Class";
        kentjohn.seatReserve(SeatNo, Price,FlightClass,Origin3,Destination3,Date2,Time2,Random);
        kentjohn.setVisible(true);
        if(FirstTable.getSelectedRow()==-1){
           
        }
        else{
            kent.removeRow(FirstTable.getSelectedRow()); 
        }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatFirst.txt"));
                    bw.write("");
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    BufferedWriter bw = new BufferedWriter (new FileWriter("D:\\Java File Handling\\UpdateSeatFirst.txt"));
                    for(int i=0;i<FirstTable.getRowCount(); i++){
                        for(int j=0;j<FirstTable.getColumnCount(); j++){
                            bw.write((String)FirstTable.getModel().getValueAt(i,j)+"\t");
                        }
                        bw.newLine();
                        
                    }
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(Frame3Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                
              this.dispose();  
            }
     

    public void InsertData(FileInputStream is){
        
    DefaultTableModel kent34 = (DefaultTableModel) EconomyTable.getModel();
        
    Scanner scan = new Scanner(is);
    String[] array;
    while (scan.hasNextLine()) {
        String line = scan.nextLine();
        if(line.indexOf(",")>-1)
            array = line.split(",");
        else
            array = line.split("\t");
        Object[] data = new Object[array.length];
        System.arraycopy(array, 0, data, 0, array.length);
        kent34.addRow(data);
   }
    EconomyTable.setModel(kent34);
    
    }//GEN-LAST:event_FirstTableMouseClicked

    private void ViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewButtonActionPerformed
       
        if((LP>=1000) && (LP<=1400)){
            x=1;
            Random=2313124;
        try {
          DefaultTableModel kent34 = (DefaultTableModel) EconomyTable.getModel();
          final FileInputStream is;
          File f = new File("D:\\Java File Handling\\UpdateSeatEcoP1000.txt");
          is = new FileInputStream(f);
          InsertData(is);
          
          Scanner scan = new Scanner(is);
          String[] array;
          while (scan.hasNextLine()) {
              String line = scan.nextLine();
              if(line.indexOf(",")>-1)
                  array = line.split(",");
              else
                  array = line.split("\t");
              Object[] data = new Object[array.length];
              System.arraycopy(array, 0, data, 0, array.length);
              kent34.addRow(data);
          }
          EconomyTable.setModel(kent34);
      } catch (FileNotFoundException ex) {
          Logger.getLogger(FlightRecords.class.getName()).log(Level.SEVERE, null, ex);
      }
        }
       else if((LP>=1500) && (LP<=1900)){
           x=2;
           Random=293423492;
        try {
          DefaultTableModel kent34 = (DefaultTableModel) EconomyTable.getModel();
          final FileInputStream is;
          File f = new File("D:\\Java File Handling\\UpdateSeatEcoP1500.txt");
          is = new FileInputStream(f);
          InsertData(is);
          
          Scanner scan = new Scanner(is);
          String[] array;
          while (scan.hasNextLine()) {
              String line = scan.nextLine();
              if(line.indexOf(",")>-1)
                  array = line.split(",");
              else
                  array = line.split("\t");
              Object[] data = new Object[array.length];
              System.arraycopy(array, 0, data, 0, array.length);
              kent34.addRow(data);
          }
          EconomyTable.setModel(kent34);
      } catch (FileNotFoundException ex) {
          Logger.getLogger(FlightRecords.class.getName()).log(Level.SEVERE, null, ex);
      }
        }
       else if((LP>=2000) &&(LP<=2500)){
           x=3;
           Random=39530530;
        try {
          DefaultTableModel kent34 = (DefaultTableModel) EconomyTable.getModel();
          final FileInputStream is;
          File f = new File("D:\\Java File Handling\\UpdateSeatEcoP2000.txt");
          is = new FileInputStream(f);
          InsertData(is);
          
          Scanner scan = new Scanner(is);
          String[] array;
          while (scan.hasNextLine()) {
              String line = scan.nextLine();
              if(line.indexOf(",")>-1)
                  array = line.split(",");
              else
                  array = line.split("\t");
              Object[] data = new Object[array.length];
              System.arraycopy(array, 0, data, 0, array.length);
              kent34.addRow(data);
          }
          EconomyTable.setModel(kent34);
      } catch (FileNotFoundException ex) {
          Logger.getLogger(FlightRecords.class.getName()).log(Level.SEVERE, null, ex);
      }
        }
       else if((LP>=2500) &&(LP<=3000)){
           x=4;
           Random=282093482;
        try {
          DefaultTableModel kent34 = (DefaultTableModel) EconomyTable.getModel();
          final FileInputStream is;
          File f = new File("D:\\Java File Handling\\UpdateSeatEcoP2500.txt");
          is = new FileInputStream(f);
          InsertData(is);
          
          Scanner scan = new Scanner(is);
          String[] array;
          while (scan.hasNextLine()) {
              String line = scan.nextLine();
              if(line.indexOf(",")>-1)
                  array = line.split(",");
              else
                  array = line.split("\t");
              Object[] data = new Object[array.length];
              System.arraycopy(array, 0, data, 0, array.length);
              kent34.addRow(data);
          }
          EconomyTable.setModel(kent34);
      } catch (FileNotFoundException ex) {
          Logger.getLogger(FlightRecords.class.getName()).log(Level.SEVERE, null, ex);
      }
        }
       else if((LP>=3000) &&(LP<=5000)){
           x=5;
           Random=98475030;
        try {
          DefaultTableModel kent34 = (DefaultTableModel) EconomyTable.getModel();
          final FileInputStream is;
          File f = new File("D:\\Java File Handling\\UpdateSeatEco.txt");
          is = new FileInputStream(f);
          InsertData(is);
          
          Scanner scan = new Scanner(is);
          String[] array;
          while (scan.hasNextLine()) {
              String line = scan.nextLine();
              if(line.indexOf(",")>-1)
                  array = line.split(",");
              else
                  array = line.split("\t");
              Object[] data = new Object[array.length];
              System.arraycopy(array, 0, data, 0, array.length);
              kent34.addRow(data);
          }
          EconomyTable.setModel(kent34);
      } catch (FileNotFoundException ex) {
          Logger.getLogger(FlightRecords.class.getName()).log(Level.SEVERE, null, ex);
      }
        }
        
      try {
          DefaultTableModel kent34 = (DefaultTableModel) FirstTable.getModel();
          final FileInputStream is2;
          File f = new File("D:\\Java File Handling\\UpdateSeatFirst.txt");
          is2 = new FileInputStream(f);
          InsertData2(is2);
          
          Scanner scan = new Scanner(is2);
          String[] array;
          while (scan.hasNextLine()) {
              String line = scan.nextLine();
              if(line.indexOf(",")>-1)
                  array = line.split(",");
              else
                  array = line.split("\t");
              Object[] data = new Object[array.length];
              System.arraycopy(array, 0, data, 0, array.length);
              kent34.addRow(data);
          }
          FirstTable.setModel(kent34);
      } catch (FileNotFoundException ex) {
          Logger.getLogger(FlightRecords.class.getName()).log(Level.SEVERE, null, ex);
      }
      ViewButton.setEnabled(false);
    }//GEN-LAST:event_ViewButtonActionPerformed
    
    public void InsertData2(FileInputStream is2){
        
    DefaultTableModel kent34 = (DefaultTableModel)FirstTable.getModel();
        
    Scanner scan = new Scanner(is2);
    String[] array;
    while (scan.hasNextLine()) {
        String line = scan.nextLine();
        if(line.indexOf(",")>-1)
            array = line.split(",");
        else
            array = line.split("\t");
        Object[] data = new Object[array.length];
        System.arraycopy(array, 0, data, 0, array.length);
        kent34.addRow(data);
   }
    FirstTable.setModel(kent34);
    
    }   
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame3Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame3Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame3Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame3Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame3Reservation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DateField;
    private javax.swing.JTable EconomyTable;
    private javax.swing.JTable FirstTable;
    private javax.swing.JTextField TerminalField;
    private javax.swing.JTextField TimeField;
    private javax.swing.JButton ViewButton;
    private javax.swing.JTextField airlinerField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
